/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Workout = {
  _id: string;
  _type: "workout";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userId?: string;
  date?: string;
  duration?: number;
  exercises?: Array<{
    exercise?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "exercise";
    };
    sets?: Array<{
      reps?: number;
      weight?: number;
      weightUnit?: "lbs" | "kg";
      _key: string;
    }>;
    _key: string;
  }>;
};

export type Exercise = {
  _id: string;
  _type: "exercise";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  difficulty?: "beginner" | "intermediate" | "advanced";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  videoUrl?: string;
  isActive?: boolean;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Workout | Exercise | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../src/app/(app)/(tabs)/exercises.tsx
// Variable: exercisesQuery
// Query: *[_type == "exercise" && isActive == true] | order(name asc) {  _id,  _type,  _createdAt,  _updatedAt,  _rev,  name,  description,  difficulty,  image,  videoUrl,  isActive}
export type ExercisesQueryResult = Array<{
  _id: string;
  _type: "exercise";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string | null;
  description: string | null;
  difficulty: "advanced" | "beginner" | "intermediate" | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  videoUrl: string | null;
  isActive: boolean | null;
}>;

// Source: ../src/app/(app)/(tabs)/history/index.tsx
// Variable: getWorkoutQuery
// Query: *[_type == "workout" && userId == $userId] | order(date desc) {  _id,  date,  duration,  exercises[] {  exercise-> {  _id,  name  },  sets[] {  reps,  weight,  weightUnit,  _type,  _key  },  _type,  _key  }  }
export type GetWorkoutQueryResult = Array<{
  _id: string;
  date: string | null;
  duration: number | null;
  exercises: Array<{
    exercise: {
      _id: string;
      name: string | null;
    } | null;
    sets: Array<{
      reps: number | null;
      weight: number | null;
      weightUnit: "kg" | "lbs" | null;
      _type: null;
      _key: string;
    }> | null;
    _type: null;
    _key: string;
  }> | null;
}>;

// Source: ../src/app/(app)/(tabs)/history/workout-record.tsx
// Variable: getworkoutRecordQuery
// Query: *[_type == "workout" && _id == $workoutId ][0]{  _id,  _type,  _createdAt,  date,  duration,  exercises[] {  exercise-> {  _id,  name,  description  },  sets[] {  reps,  weight,  weightUnit,  _type,  _key  },  _type,  _key}  }
export type GetworkoutRecordQueryResult = {
  _id: string;
  _type: "workout";
  _createdAt: string;
  date: string | null;
  duration: number | null;
  exercises: Array<{
    exercise: {
      _id: string;
      name: string | null;
      description: string | null;
    } | null;
    sets: Array<{
      reps: number | null;
      weight: number | null;
      weightUnit: "kg" | "lbs" | null;
      _type: null;
      _key: string;
    }> | null;
    _type: null;
    _key: string;
  }> | null;
} | null;

// Source: ../src/app/(app)/exercise-detail.tsx
// Variable: singleExerciseQuery
// Query: *[_type == "exercise" && _id== $id][0] {        _id,        _type,        _createdAt,        _updatedAt,        _rev,        name,        description,        difficulty,        image,        videoUrl,        isActive    }
export type SingleExerciseQueryResult = {
  _id: string;
  _type: "exercise";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string | null;
  description: string | null;
  difficulty: "advanced" | "beginner" | "intermediate" | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  videoUrl: string | null;
  isActive: boolean | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"exercise\" && isActive == true] | order(name asc) {\n  _id,\n  _type,\n  _createdAt,\n  _updatedAt,\n  _rev,\n  name,\n  description,\n  difficulty,\n  image,\n  videoUrl,\n  isActive\n}": ExercisesQueryResult;
    "*[_type == \"workout\" && userId == $userId] | order(date desc) {\n  _id,\n  date,\n  duration,\n  exercises[] {\n  exercise-> {\n  _id,\n  name\n  },\n  sets[] {\n  reps,\n  weight,\n  weightUnit,\n  _type,\n  _key\n  },\n  _type,\n  _key\n  }\n  }": GetWorkoutQueryResult;
    "*[_type == \"workout\" && _id == $workoutId ][0]{\n  _id,\n  _type,\n  _createdAt,\n  date,\n  duration,\n  exercises[] {\n  exercise-> {\n  _id,\n  name,\n  description\n  },\n  sets[] {\n  reps,\n  weight,\n  weightUnit,\n  _type,\n  _key\n  },\n  _type,\n  _key\n}\n  }": GetworkoutRecordQueryResult;
    "*[_type == \"exercise\" && _id== $id][0] {\n        _id,\n        _type,\n        _createdAt,\n        _updatedAt,\n        _rev,\n        name,\n        description,\n        difficulty,\n        image,\n        videoUrl,\n        isActive\n    }": SingleExerciseQueryResult;
  }
}
